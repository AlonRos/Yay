#include <windows.h>
#include <iostream>
#include "Structures.h"
#include "PackedStructures.h"
#include "CommWithDriver.h"
#include <csignal>



CommWithDriverManager manager;

const BYTE buffer[] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xc4, 0x53, 0x48, 0x83, 0xec, 0x60,
0x48, 0x83, 0x60, 0x18, 0x00, 0x48, 0x8b, 0xd9, 0x48, 0x8d, 0x15, 0x11, 0x07, 0x00, 0x00, 0x48,
0x8d, 0x48, 0xd8, 0xff, 0x15, 0x1f, 0x10, 0x00, 0x00, 0x4c, 0x8d, 0x9c, 0x24, 0x80, 0x00, 0x00,
0x00, 0x4c, 0x8d, 0x44, 0x24, 0x40, 0x4c, 0x89, 0x5c, 0x24, 0x30, 0x41, 0xb9, 0x50, 0xc3, 0x00,
0x00, 0x33, 0xd2, 0x48, 0x8b, 0xcb, 0xc6, 0x44, 0x24, 0x28, 0x00, 0xc7, 0x44, 0x24, 0x20, 0x00,
0x01, 0x00, 0x00, 0xff, 0x15, 0xdf, 0x0f, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x09, 0x83, 0x0d, 0xac,
0x20, 0x00, 0x00, 0xff, 0xeb, 0x63, 0x83, 0x25, 0xa3, 0x20, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x05,
0x64, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x15, 0xe5, 0x06, 0x00, 0x00, 0x48, 0x89, 0x43, 0x70, 0x48,
0x89, 0x83, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89, 0x83, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x05,
0xbc, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x89, 0x43, 0x68, 0xff, 0x15, 0xa5,
0x0f, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0xff, 0x15, 0x9d,
0x0f, 0x00, 0x00, 0x8b, 0xd8, 0x85, 0xc0, 0x79, 0x0e, 0x48, 0x8b, 0x8c, 0x24, 0x80, 0x00, 0x00,
0x00, 0xff, 0x15, 0x69, 0x0f, 0x00, 0x00, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x60, 0x5b, 0xc3, 0xcc,
0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c,
};


DWORD* getKMPTable(BYTE* word, DWORD wordLength) {
    DWORD* table = (DWORD*)malloc(wordLength*sizeof(DWORD));
    
    
    table[0] = -1;
    int cnd = 0;
    for (DWORD pos = 1; pos < wordLength; ++pos) {
        if (word[pos] == word[cnd]) {
            table[pos] = table[cnd];
        }
        else {
            table[pos] = cnd;
            while (cnd >= 0 && word[pos] != word[cnd]) {
                cnd = table[cnd];
            }
        }
        ++cnd;

    }

    return table;
}

DWORD j = 0;

BOOL searchBufferInPhysicalMemory(BYTE* startAddress, DWORD searchLength, BYTE* buffer, DWORD bufferLength, CommWithDriverManager& manager, PVOID& storePhysicalAddress) {
    
    int k = 0;
    DWORD* table = getKMPTable(buffer, bufferLength);

    BYTE currentByte;
    DWORD lastReadIndex = 1;

    SHORT counter = 0;

    while (j - k <= searchLength - bufferLength) {
        if (j == 0x2000) j = 0x4000;  // BSOD when reading from addres in the range [0x2000, 0x3fff]
        //printf("j = %d, k = %d\n", j, k);

        if (j != lastReadIndex) {
            printf("%p\n", startAddress + j);
            manager.readPhysicalMemory(startAddress + j, 1, 1, &currentByte);
            
            lastReadIndex = j;
        }

        if (buffer[k] == currentByte) {
            ++j;
            ++k;
            if (k == bufferLength) {
                storePhysicalAddress = startAddress + j - k;
                return TRUE;
            }
        }
        else {
            k = table[k];
            if (k < 0) {
                j -= k;
                k = 0;
            }
        }

    }
    printf("yay6\n");
    return FALSE;

}



void func(int s) {
    printf("func was called");
    exit(0);
}

int main() {
    int pd;
    std::cin >> pd;

    std::signal(SIGSEGV, func);

    HANDLE device = manager.initializeDevice(L"\\\\.\\NTIOLib_MB");
    PVOID address;
    BOOL b = searchBufferInPhysicalMemory(0, 0xffffffff, (BYTE*)buffer, sizeof(buffer), manager, address);
    if (b) {
        printf("%p\n", address);
    }
    else {
        printf("%d\n", b);
    }

    //PVOID KiSystemCall64;
    //manager.readMSR(0xc0000082, (QWORD*)&KiSystemCall64); //0xc0000082
    //printf("%llx\n", KiSystemCall64);
    //
    //
    //PVOID KeServiceDescriptorTable = (BYTE*)KiSystemCall64 + 0x374 + 0x9f0b4c;
    //PVOID KeServiceDescriptorTableShadow = (BYTE*)KiSystemCall64 + 0x37b + 0x8ebcc5;
    // 
    //
    //printf("%llx, %llx\n", KeServiceDescriptorTable, KeServiceDescriptorTableShadow);


    //DWORD* table = getKMPTable((BYTE*)"participate in parachute", 24);
    //for (int i = 0; i < 24; ++i) {
    //    printf("%d ", table[i]);
    //}
    //printf("\n");
}
